"use client";
import { useEffect } from "react";
import { getProvider } from "@binance/w3w-ethereum-provider";
import { utf8ToHex } from "@binance/w3w-utils";
import Head from "next/head";

import { useState } from "react";

const provider = getProvider({ chainId: 5 });

const disconnect = async () => {
  await provider.disconnect();
};

export default function Home() {
  const [account, setAccount] = useState("");
  const [chainId, setChainId] = useState("0");

  const enable = async () => {
    provider?.setLng("zh-CN");
    const accounts = await provider.enable();
    console.log("ðŸš€ ~ enable accounts:", accounts);
    setAccount(accounts[0]);
  };
  const getAccount = async () => {
    const accounts = await provider.request({
      method: "eth_accounts",
    });
    console.log(
      "ðŸš€ ~~ file: ethereum-provider.tsx:32 ~~ getAccount ~~ provider.accounts:",
      accounts
    );
    setAccount(accounts[0]);
  };
  const signMessage = async () => {
    const message = "hello world";
    try {
      const res = await provider.request({
        method: "personal_sign",
        params: [utf8ToHex(message), account],
      });
      console.log("ðŸš€ ~ signMessage ~ res:", res);
    } catch (error) {
      throw error;
    }
  };

  const getChainId = async () => {
    const chainId = provider.chainId;
    setChainId(chainId);
  };
  const changeChainId = () => {
    provider?.request({
      method: "wallet_switchEthereumChain",
      params: [{ chainId: "0x38" }],
    });
  };
  useEffect(() => {
    if (!provider) return;

    provider.on("accountsChanged", (acc) => {
      setAccount(acc[0]);
    });
    provider.on("chainChanged", (chainId) => {
      setChainId(chainId);
    });
    provider.on("disconnect", () => {
      setChainId("0x0");
      setAccount("");
    });
  }, [provider]);

  const sendTransaction = async () => {
    const payload = {
      from: account,
      to: account,
      value: "0x1",
    };
    const res = await provider.request({
      method: "eth_sendTransaction",
      params: [payload],
    });
    console.log("ðŸš€ ~~ file: client.tsx:62 ~~ sendTransaction ~~ res:", res);
    alert("success");
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        style={{
          height: "100vh",
        }}
      >
        <section>
          <h2>ethereum-provider</h2>
          <button onClick={enable}>enable</button>
          <button onClick={disconnect}>disconnect</button>
          <button onClick={getAccount}>getAccount</button>
          <button onClick={signMessage}>signMessage</button>
          <button onClick={getChainId}>getChainId</button>
          <button onClick={changeChainId}>changeChainId</button>
          <button onClick={sendTransaction}>sendTransaction</button>
        </section>
        <div>account: {account}</div>
        <div>chainId: {chainId}</div>
      </main>
    </>
  );
}
